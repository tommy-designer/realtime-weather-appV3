{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\\\u9673\\u5A01\\u8C6A\\\\realtime-weather-appV3\\\\realtime-weather-appV3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"C:\\\\Users\\\\\\u9673\\u5A01\\u8C6A\\\\realtime-weather-appV3\\\\realtime-weather-appV3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:\\\\Users\\\\\\u9673\\u5A01\\u8C6A\\\\realtime-weather-appV3\\\\realtime-weather-appV3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\\\u9673\\u5A01\\u8C6A\\\\realtime-weather-appV3\\\\realtime-weather-appV3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useCallback}from\"react\";var fetchCurrentWeather=function fetchCurrentWeather(locationName){return fetch(\"https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=CWB-507B37E0-0383-4D8C-878D-628B54EC3536&locationName=\".concat(locationName)).then(function(response){return response.json();}).then(function(data){var locationData=data.records.location[0];var weatherElements=locationData.weatherElement.reduce(function(neededElements,item){if([\"WDSD\",\"TEMP\",\"HUMD\"].includes(item.elementName)){neededElements[item.elementName]=item.elementValue;}return neededElements;},{});return{observationTime:locationData.time.obsTime,locationName:locationData.locationName,temperature:weatherElements.TEMP,windSpeed:weatherElements.WDSD,humid:weatherElements.HUMD};});};var fetchWeatherForecast=function fetchWeatherForecast(cityName){return fetch(\"https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=CWB-507B37E0-0383-4D8C-878D-628B54EC3536&locationName=\".concat(cityName)).then(function(response){return response.json();}).then(function(data){var locationData=data.records.location[0];var weatherElements=locationData.weatherElement.reduce(function(neededElements,item){if([\"Wx\",\"PoP\",\"CI\"].includes(item.elementName)){neededElements[item.elementName]=item.time[0].parameter;}return neededElements;},{});return{description:weatherElements.Wx.parameterName,weatherCode:weatherElements.Wx.parameterValue,rainPossibility:weatherElements.PoP.parameterName,comfortability:weatherElements.CI.parameterName};});};var useWeatherApi=function useWeatherApi(currentLocation){var locationName=currentLocation.locationName,cityName=currentLocation.cityName;var _useState=useState({observationTime:new Date(),locationName:\"\",humid:0,temperature:0,windSpeed:0,description:\"\",weatherCode:0,rainPossibility:0,comfortability:\"\",isLoading:true}),_useState2=_slicedToArray(_useState,2),weatherElement=_useState2[0],setWeatherElement=_useState2[1];var fetchData=useCallback(function(){var fetchingData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$Promise$all,_yield$Promise$all2,currentWeather,weatherForecast;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Promise.all([fetchCurrentWeather(locationName),fetchWeatherForecast(cityName)]);case 2:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);currentWeather=_yield$Promise$all2[0];weatherForecast=_yield$Promise$all2[1];setWeatherElement(_objectSpread(_objectSpread(_objectSpread({},currentWeather),weatherForecast),{},{isLoading:false}));case 7:case\"end\":return _context.stop();}}},_callee);}));return function fetchingData(){return _ref.apply(this,arguments);};}();setWeatherElement(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{isLoading:true});});fetchingData();},[locationName,cityName]);useEffect(function(){fetchData();},[fetchData]);return[weatherElement,fetchData];};export default useWeatherApi;","map":{"version":3,"sources":["C:/Users/陳威豪/realtime-weather-appV3/realtime-weather-appV3/src/useWeatherApi.js"],"names":["React","useState","useEffect","useCallback","fetchCurrentWeather","locationName","fetch","then","response","json","data","locationData","records","location","weatherElements","weatherElement","reduce","neededElements","item","includes","elementName","elementValue","observationTime","time","obsTime","temperature","TEMP","windSpeed","WDSD","humid","HUMD","fetchWeatherForecast","cityName","parameter","description","Wx","parameterName","weatherCode","parameterValue","rainPossibility","PoP","comfortability","CI","useWeatherApi","currentLocation","Date","isLoading","setWeatherElement","fetchData","fetchingData","Promise","all","currentWeather","weatherForecast","prevState"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nconst fetchCurrentWeather = locationName => {\r\n  return fetch(\r\n    `https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=CWB-507B37E0-0383-4D8C-878D-628B54EC3536&locationName=${locationName}`\r\n  )\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      const locationData = data.records.location[0];\r\n\r\n      const weatherElements = locationData.weatherElement.reduce(\r\n        (neededElements, item) => {\r\n          if ([\"WDSD\", \"TEMP\", \"HUMD\"].includes(item.elementName)) {\r\n            neededElements[item.elementName] = item.elementValue;\r\n          }\r\n          return neededElements;\r\n        },\r\n        {}\r\n      );\r\n\r\n      return {\r\n        observationTime: locationData.time.obsTime,\r\n        locationName: locationData.locationName,\r\n        temperature: weatherElements.TEMP,\r\n        windSpeed: weatherElements.WDSD,\r\n        humid: weatherElements.HUMD\r\n      };\r\n    });\r\n};\r\nconst fetchWeatherForecast = cityName => {\r\n  return fetch(\r\n    `https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=CWB-507B37E0-0383-4D8C-878D-628B54EC3536&locationName=${cityName}`\r\n  )\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      const locationData = data.records.location[0];\r\n      const weatherElements = locationData.weatherElement.reduce(\r\n        (neededElements, item) => {\r\n          if ([\"Wx\", \"PoP\", \"CI\"].includes(item.elementName)) {\r\n            neededElements[item.elementName] = item.time[0].parameter;\r\n          }\r\n          return neededElements;\r\n        },\r\n        {}\r\n      );\r\n\r\n      return {\r\n        description: weatherElements.Wx.parameterName,\r\n        weatherCode: weatherElements.Wx.parameterValue,\r\n        rainPossibility: weatherElements.PoP.parameterName,\r\n        comfortability: weatherElements.CI.parameterName\r\n      };\r\n    });\r\n};\r\nconst useWeatherApi = currentLocation => {\r\n  const { locationName, cityName } = currentLocation;\r\n  const [weatherElement, setWeatherElement] = useState({\r\n    observationTime: new Date(),\r\n    locationName: \"\",\r\n    humid: 0,\r\n    temperature: 0,\r\n    windSpeed: 0,\r\n    description: \"\",\r\n    weatherCode: 0,\r\n    rainPossibility: 0,\r\n    comfortability: \"\",\r\n    isLoading: true\r\n  });\r\n  const fetchData = useCallback(() => {\r\n    const fetchingData = async () => {\r\n      const [currentWeather, weatherForecast] = await Promise.all([\r\n        fetchCurrentWeather(locationName),\r\n        fetchWeatherForecast(cityName)\r\n      ]);\r\n\r\n      setWeatherElement({\r\n        ...currentWeather,\r\n        ...weatherForecast,\r\n        isLoading: false\r\n      });\r\n    };\r\n\r\n    setWeatherElement(prevState => ({\r\n      ...prevState,\r\n      isLoading: true\r\n    }));\r\n\r\n    fetchingData();\r\n  }, [locationName, cityName]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  return [weatherElement, fetchData];\r\n};\r\nexport default useWeatherApi;\r\n"]},"metadata":{},"sourceType":"module"}