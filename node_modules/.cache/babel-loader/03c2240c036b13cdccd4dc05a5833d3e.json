{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u9673\\u5A01\\u8C6A\\\\realtime-weather-app\\\\src\\\\WeatherApp.js\";\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport WeatherCard from \"./weatherCard\";\nimport useWeatherApi from \"./useWeatherApi\";\nimport useSunsetApi from \"./useSunsetApi\";\nimport WeatherSetting from \"./WeatherSetting\";\nimport { findLocation } from \"./utils\";\nimport Moment from \"moment\";\nconst theme = {\n  light: {\n    backgroundColor: \"#ededed\",\n    foregroundColor: \"#f9f9f9\",\n    boxShadow: \"0 1px 3px 0 #999\",\n    titleColor: \"#212121\",\n    temperaturColor: \"#757575\",\n    textColor: \"#828282\"\n  },\n  dark: {\n    backgroundColor: \"#1f2022\",\n    foregroundColor: \"#121416\",\n    boxShadow: \"0 1px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)\",\n    titleColor: \"#f9f9fa\",\n    temperatrureColor: \"#ddd\",\n    textColor: \"#ccc\"\n  }\n};\nconst Container = styled.div`\n  background-color: ${({\n  theme\n}) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst getMoment = (locationName, sunset) => {\n  if (!sunset) return null;\n  const now = new Date();\n  const sunriseTimestamp = new Date(`${Moment().format('YYYY-MM-DD')} ${sunset.rising}`).getTime();\n  const sunsetTimestamp = new Date(`${Moment().format('YYYY-MM-DD')} ${sunset.falling}`).getTime();\n  const nowTimeStamp = now.getTime();\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp ? \"day\" : \"night\";\n};\n\nconst WeatherApp = () => {\n  const storageCity = localStorage.getItem(\"cityName\");\n  const [currentCity, setCurrentCity] = useState(storageCity || \"臺北市\");\n  const currentLocation = findLocation(currentCity) || {};\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n  const [currentTheme, setCurrentTheme] = useState(\"light\");\n  const [currentPage, setCurrentPage] = useState(\"WeatherCard\");\n  const sunset = useSunsetApi(currentLocation);\n  const moment = useMemo(() => getMoment(currentLocation.sunriseCityName, sunset), [currentLocation.sunriseCityName]);\n  useEffect(() => {\n    setCurrentTheme(moment === \"day\" ? \"light\" : \"dark\");\n  }, [moment]);\n  useEffect(() => {\n    localStorage.setItem(\"cityName\", currentCity);\n  }, [currentCity]);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme[currentTheme],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, currentPage === \"WeatherCard\" && /*#__PURE__*/React.createElement(WeatherCard, {\n    cityName: currentLocation.cityName,\n    weatherElement: weatherElement,\n    moment: moment,\n    fetchData: fetchData,\n    setCurrentPage: setCurrentPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), currentPage === \"WeatherSetting\" && /*#__PURE__*/React.createElement(WeatherSetting, {\n    cityName: currentLocation.cityName,\n    setCurrentCity: setCurrentCity,\n    setCurrentPage: setCurrentPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default WeatherApp;","map":{"version":3,"sources":["C:/Users/陳威豪/realtime-weather-app/src/WeatherApp.js"],"names":["React","useState","useEffect","useMemo","styled","ThemeProvider","WeatherCard","useWeatherApi","useSunsetApi","WeatherSetting","findLocation","Moment","theme","light","backgroundColor","foregroundColor","boxShadow","titleColor","temperaturColor","textColor","dark","temperatrureColor","Container","div","getMoment","locationName","sunset","now","Date","sunriseTimestamp","format","rising","getTime","sunsetTimestamp","falling","nowTimeStamp","WeatherApp","storageCity","localStorage","getItem","currentCity","setCurrentCity","currentLocation","weatherElement","fetchData","currentTheme","setCurrentTheme","currentPage","setCurrentPage","moment","sunriseCityName","setItem","cityName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport WeatherCard from \"./weatherCard\";\nimport useWeatherApi from \"./useWeatherApi\";\nimport useSunsetApi from \"./useSunsetApi\";\nimport WeatherSetting from \"./WeatherSetting\";\nimport { findLocation } from \"./utils\";\nimport Moment from \"moment\";\n\nconst theme = {\n  light: {\n    backgroundColor: \"#ededed\",\n    foregroundColor: \"#f9f9f9\",\n    boxShadow: \"0 1px 3px 0 #999\",\n    titleColor: \"#212121\",\n    temperaturColor: \"#757575\",\n    textColor: \"#828282\"\n  },\n  dark: {\n    backgroundColor: \"#1f2022\",\n    foregroundColor: \"#121416\",\n    boxShadow: \"0 1px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)\",\n    titleColor: \"#f9f9fa\",\n    temperatrureColor: \"#ddd\",\n    textColor: \"#ccc\"\n  }\n};\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst getMoment =(locationName,sunset) =>{\n  if(!sunset)return null;\n\n  const now = new Date();\n  \n  const sunriseTimestamp = new Date(\n     `${Moment().format('YYYY-MM-DD')} ${sunset.rising}`\n  ).getTime();\n  const sunsetTimestamp = new Date(\n       `${Moment().format('YYYY-MM-DD')} ${sunset.falling}`\n  ).getTime();\n  const nowTimeStamp = now.getTime();\n\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp\n    ? \"day\"\n    : \"night\";\n};\n\nconst WeatherApp = () => {\n  const storageCity = localStorage.getItem(\"cityName\");\n  const [currentCity, setCurrentCity] = useState(storageCity || \"臺北市\");\n  const currentLocation = findLocation(currentCity) || {};\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n  const [currentTheme, setCurrentTheme] = useState(\"light\");\n  const [currentPage, setCurrentPage] = useState(\"WeatherCard\");\n\n  const sunset = useSunsetApi(currentLocation)\n    const moment = useMemo(() => getMoment(currentLocation.sunriseCityName,sunset), [\n    currentLocation.sunriseCityName\n  ]);\n\n  useEffect(() => {\n    setCurrentTheme(moment === \"day\" ? \"light\" : \"dark\");\n  }, [moment]);\n\n  useEffect(() => {\n    localStorage.setItem(\"cityName\", currentCity);\n  }, [currentCity]);\n\n  return (\n    <ThemeProvider theme={theme[currentTheme]}>\n      <Container>\n        {currentPage === \"WeatherCard\" && (\n          <WeatherCard\n            cityName={currentLocation.cityName}\n            weatherElement={weatherElement}\n            moment={moment}\n            fetchData={fetchData}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n        {currentPage === \"WeatherSetting\" && (\n          <WeatherSetting\n            cityName={currentLocation.cityName}\n            setCurrentCity={setCurrentCity}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default WeatherApp;\n"]},"metadata":{},"sourceType":"module"}