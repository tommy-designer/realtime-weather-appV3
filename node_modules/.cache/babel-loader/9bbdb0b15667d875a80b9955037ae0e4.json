{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u9673\\u5A01\\u8C6A\\\\realtime-weather-app\\\\src\\\\WeatherApp.js\";\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport WeatherCard from \"./weatherCard\";\nimport useWeatherApi from \"./useWeatherApi\";\nimport useSunsetApi from \"./useSunsetApi\";\nimport WeatherSetting from \"./WeatherSetting\";\nimport { findLocation } from \"./utils\";\nimport Moment from \"moment\";\nconst theme = {\n  light: {\n    backgroundColor: \"#ededed\",\n    foregroundColor: \"#f9f9f9\",\n    boxShadow: \"0 1px 3px 0 #999\",\n    titleColor: \"#212121\",\n    temperaturColor: \"#757575\",\n    textColor: \"#828282\"\n  },\n  dark: {\n    backgroundColor: \"#1f2022\",\n    foregroundColor: \"#121416\",\n    boxShadow: \"0 1px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)\",\n    titleColor: \"#f9f9fa\",\n    temperatrureColor: \"#ddd\",\n    textColor: \"#ccc\"\n  }\n};\nconst Container = styled.div`\n  background-color: ${({\n  theme\n}) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst getMoment = locationName => {\n  const location = sunriseAndSunsetData.find(data => data.locationName === locationName);\n  if (!location) return null;\n  const now = new Date();\n  const nowDate = Intl.DateTimeFormat(\"zh-TW\", {\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\"\n  }).format(now).replace(/\\//g, \"-\");\n  const locationDate = location.time && location.time.find(time => time.dataTime === nowDate);\n  const sunriseTimestamp = new Date(`${locationDate.dataTime} ${locationDate.sunrise}`).getTime();\n  const sunsetTimestamp = new Date(`${locationDate.dataTime} ${locationDate.sunset}`).getTime();\n  const nowTimeStamp = now.getTime();\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp ? \"day\" : \"night\";\n};\n\nconst WeatherApp = () => {\n  const storageCity = localStorage.getItem(\"cityName\");\n  const [currentCity, setCurrentCity] = useState(storageCity || \"臺北市\");\n  const currentLocation = findLocation(currentCity) || {};\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n  const [currentTheme, setCurrentTheme] = useState(\"light\");\n  const [currentPage, setCurrentPage] = useState(\"WeatherCard\");\n  const moment = useMemo(() => getMoment(currentLocation.sunriseCityName), [currentLocation.sunriseCityName]);\n  useEffect(() => {\n    setCurrentTheme(moment === \"day\" ? \"light\" : \"dark\");\n  }, [moment]);\n  useEffect(() => {\n    localStorage.setItem(\"cityName\", currentCity);\n  }, [currentCity]);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme[currentTheme],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, currentPage === \"WeatherCard\" && /*#__PURE__*/React.createElement(WeatherCard, {\n    cityName: currentLocation.cityName,\n    weatherElement: weatherElement,\n    moment: moment,\n    fetchData: fetchData,\n    setCurrentPage: setCurrentPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), currentPage === \"WeatherSetting\" && /*#__PURE__*/React.createElement(WeatherSetting, {\n    cityName: currentLocation.cityName,\n    setCurrentCity: setCurrentCity,\n    setCurrentPage: setCurrentPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default WeatherApp;","map":{"version":3,"sources":["C:/Users/陳威豪/realtime-weather-app/src/WeatherApp.js"],"names":["React","useState","useEffect","useMemo","styled","ThemeProvider","WeatherCard","useWeatherApi","useSunsetApi","WeatherSetting","findLocation","Moment","theme","light","backgroundColor","foregroundColor","boxShadow","titleColor","temperaturColor","textColor","dark","temperatrureColor","Container","div","getMoment","locationName","location","sunriseAndSunsetData","find","data","now","Date","nowDate","Intl","DateTimeFormat","year","month","day","format","replace","locationDate","time","dataTime","sunriseTimestamp","sunrise","getTime","sunsetTimestamp","sunset","nowTimeStamp","WeatherApp","storageCity","localStorage","getItem","currentCity","setCurrentCity","currentLocation","weatherElement","fetchData","currentTheme","setCurrentTheme","currentPage","setCurrentPage","moment","sunriseCityName","setItem","cityName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport WeatherCard from \"./weatherCard\";\nimport useWeatherApi from \"./useWeatherApi\";\nimport useSunsetApi from \"./useSunsetApi\";\nimport WeatherSetting from \"./WeatherSetting\";\nimport { findLocation } from \"./utils\";\nimport Moment from \"moment\";\n\nconst theme = {\n  light: {\n    backgroundColor: \"#ededed\",\n    foregroundColor: \"#f9f9f9\",\n    boxShadow: \"0 1px 3px 0 #999\",\n    titleColor: \"#212121\",\n    temperaturColor: \"#757575\",\n    textColor: \"#828282\"\n  },\n  dark: {\n    backgroundColor: \"#1f2022\",\n    foregroundColor: \"#121416\",\n    boxShadow: \"0 1px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)\",\n    titleColor: \"#f9f9fa\",\n    temperatrureColor: \"#ddd\",\n    textColor: \"#ccc\"\n  }\n};\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst getMoment = locationName => {\n  const location = sunriseAndSunsetData.find(\n    data => data.locationName === locationName\n  );\n\n  if (!location) return null;\n\n  const now = new Date();\n  const nowDate = Intl.DateTimeFormat(\"zh-TW\", {\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\"\n  })\n    .format(now)\n    .replace(/\\//g, \"-\");\n\n  const locationDate =\n    location.time && location.time.find(time => time.dataTime === nowDate);\n  const sunriseTimestamp = new Date(\n    `${locationDate.dataTime} ${locationDate.sunrise}`\n  ).getTime();\n  const sunsetTimestamp = new Date(\n    `${locationDate.dataTime} ${locationDate.sunset}`\n  ).getTime();\n  const nowTimeStamp = now.getTime();\n\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp\n    ? \"day\"\n    : \"night\";\n};\n\nconst WeatherApp = () => {\n  const storageCity = localStorage.getItem(\"cityName\");\n  const [currentCity, setCurrentCity] = useState(storageCity || \"臺北市\");\n  const currentLocation = findLocation(currentCity) || {};\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n  const [currentTheme, setCurrentTheme] = useState(\"light\");\n  const [currentPage, setCurrentPage] = useState(\"WeatherCard\");\n\n  const moment = useMemo(() => getMoment(currentLocation.sunriseCityName), [\n    currentLocation.sunriseCityName\n  ]);\n\n  useEffect(() => {\n    setCurrentTheme(moment === \"day\" ? \"light\" : \"dark\");\n  }, [moment]);\n\n  useEffect(() => {\n    localStorage.setItem(\"cityName\", currentCity);\n  }, [currentCity]);\n\n  return (\n    <ThemeProvider theme={theme[currentTheme]}>\n      <Container>\n        {currentPage === \"WeatherCard\" && (\n          <WeatherCard\n            cityName={currentLocation.cityName}\n            weatherElement={weatherElement}\n            moment={moment}\n            fetchData={fetchData}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n        {currentPage === \"WeatherSetting\" && (\n          <WeatherSetting\n            cityName={currentLocation.cityName}\n            setCurrentCity={setCurrentCity}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default WeatherApp;\n"]},"metadata":{},"sourceType":"module"}